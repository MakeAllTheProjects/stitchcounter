[{"C:\\Users\\geeke\\DevWork\\node-react-heroku-template\\client\\src\\index.js":"1","C:\\Users\\geeke\\DevWork\\node-react-heroku-template\\client\\src\\App.js":"2","C:\\Users\\geeke\\DevWork\\node-react-heroku-template\\client\\src\\components\\MessageBanner.jsx":"3","C:\\Users\\geeke\\DevWork\\stitchcounter\\client\\src\\index.js":"4","C:\\Users\\geeke\\DevWork\\stitchcounter\\client\\src\\App.js":"5"},{"size":197,"mtime":1610744491994,"results":"6","hashOfConfig":"7"},{"size":1446,"mtime":1610745354440,"results":"8","hashOfConfig":"7"},{"size":312,"mtime":1610744491978,"results":"9","hashOfConfig":"7"},{"size":207,"mtime":1610834086575,"results":"10","hashOfConfig":"11"},{"size":4770,"mtime":1610869164168,"results":"12","hashOfConfig":"11"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1m1oc5l",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"7sc6k6",{"filePath":"22","messages":"23","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},"C:\\Users\\geeke\\DevWork\\node-react-heroku-template\\client\\src\\index.js",[],"C:\\Users\\geeke\\DevWork\\node-react-heroku-template\\client\\src\\App.js",[],"C:\\Users\\geeke\\DevWork\\node-react-heroku-template\\client\\src\\components\\MessageBanner.jsx",[],"C:\\Users\\geeke\\DevWork\\stitchcounter\\client\\src\\index.js",[],["25","26"],"C:\\Users\\geeke\\DevWork\\stitchcounter\\client\\src\\App.js",["27","28","29"],"import React, { useEffect, useReducer, useState } from 'react'\r\nimport './App.scss'\r\n\r\nexport const baseURL = process.env.REACT_APP_IS_PRODUCTION ? 'https://myherokuapp.herokuapp.com/api' : 'http://localhost:8080/api'\r\n\r\nexport const GlobalContext = React.createContext()\r\n\r\nconst initialState = {\r\n  pieces: [],\r\n  currentPiece: 0,\r\n  isPieceFormOpen: false\r\n}\r\n\r\nexport const CountReducer = (state, action) => {\r\n  const localState = JSON.parse(localStorage.getItem('stitchcount'))\r\n  const current = state.currentPiece\r\n  const piece = state.pieces[current]\r\n  const count = piece.currentCount\r\n  let newPieces = [...state.pieces]\r\n  let newState = { ...state }\r\n\r\n  switch (action.type) {\r\n    case 'TOGGLE_FORM':\r\n      return {\r\n        ...state,\r\n        isPieceFormOpen: !state.isPieceFormOpen\r\n      }\r\n\r\n    case 'SELECT_PIECE':\r\n      newState.currentPiece = action.payload.selectedPiece\r\n      localStorage.setItem('stitchcount', newState)\r\n      return newState\r\n\r\n    case 'SET_FROM_LOCAL':\r\n      return {\r\n        ...state,\r\n        pieces: localState.pieces,\r\n        currentPiece: localState.currentPiece\r\n      }\r\n\r\n    case 'INCREASE_COUNT': \r\n      if (count + 1 === piece.totalRowCount) { \r\n        if (piece.qtyMade === piece.qtyNeeded) { \r\n          newPieces[current].currentCount = count + 1\r\n          newPieces[current].qtyMade = current.qtyMade + 1\r\n          newState.pieces =  newPieces\r\n          newState.currentPiece = current + 1\r\n        } else {\r\n          newPieces[current].currentCount = 0\r\n          newPieces[current].qtyMade = current.qtyMade + 1\r\n          newState.pieces = newPieces\r\n        }        \r\n      } else { \r\n        newPieces[current].currentCount = 0\r\n        newState.pieces = newPieces\r\n      }\r\n\r\n      localStorage.setItem('stitchcount', newState)\r\n      return newState\r\n\r\n    case 'DECREASE_COUNT':\r\n      if ( count === 0 ) {\r\n        return state\r\n      } else {\r\n        newPieces[current].currentCount = count - 1\r\n        newState.pieces = newPieces\r\n\r\n        localStorage.setItem('stitchcount', newState)\r\n        return newState\r\n      }\r\n\r\n    case 'RESET_COUNT':\r\n      if (count === 0) {\r\n        return state\r\n      } else {\r\n        newPieces[current].currentCount = 0\r\n        newState.pieces = newPieces\r\n\r\n        localStorage.setItem('stitchcount', newState)\r\n        return newState\r\n      }\r\n\r\n    case 'CHECK_OFF_PIECE':\r\n      if ( current.qtyMade + 1 === current.qtyNeeded ) {\r\n        newPieces[current].qtyMade = current.qtyMade + 1\r\n        newState.pieces = newPieces\r\n        newState.currentPiece = current > state.pieces.length ? current + 1 : current\r\n      } else {\r\n        newPieces[current].qtyMade = current.qtyMade + 1\r\n        newState.pieces = newPieces\r\n      }\r\n\r\n      localStorage.setItem('stitchcount', newState)\r\n      return newState\r\n\r\n    case 'UNCHECK_OFF_PIECE':\r\n      if ( current.qtyMade === 0 ) {\r\n        return state\r\n      } else {\r\n        newPieces[current].qtyMade = current.qtyMade - 1\r\n        newState.pieces = newPieces\r\n        localStorage.setItem('stitchcount', newState)\r\n        return newState\r\n      }\r\n\r\n    case 'ADD_PIECE':\r\n      newPieces.push({\r\n        id: current,\r\n        tite: action.payload.title,\r\n        qtyNeeded: action.payload.qtyNeeded,\r\n        qtyMade: action.payload.qtyMade,\r\n        totalRowCount: action.payload.totalRowCount,\r\n        currentCount: action.payload.currentCount\r\n      })\r\n      newState.pieces = newPieces\r\n      localStorage.setItem('stitchcount', newState)\r\n      return newState\r\n\r\n    case 'REMOVE_PIECE':\r\n      newState = newState.filter(obj => obj.id !== current)\r\n      localStorage.setItem('stitchcount', newState)\r\n      return newState\r\n\r\n    case 'EDIT_PIECE':\r\n      newPieces[current] = {\r\n        id: current,\r\n        tite: action.payload.title,\r\n        qtyNeeded: action.payload.qtyNeeded,\r\n        qtyMade: action.payload.qtyMade,\r\n        totalRowCount: action.payload.totalRowCount,\r\n        currentCount: action.payload.currentCount\r\n      }\r\n      newState.pieces = newPieces\r\n      localStorage.setItem('stitchcount', newState)\r\n      return newState\r\n\r\n    case 'RESET_ALL_PIECES':\r\n      newPieces = newPieces.map(obj => { return {...obj, currentCount: 0, qtyMade: 0} })\r\n      newState.pieces = newPieces\r\n      localStorage.setItem('stitchcount', newState)\r\n      return newState\r\n\r\n    case 'DELETE_ALL_PIECES':\r\n      return initialState\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nfunction App () {\r\n  return (\r\n    <>\r\n      <div className=\"app-background\"/>\r\n      <div className=\"app\">\r\n        {/* <Counter/> */}\r\n        {/* <PieceForm/> */}\r\n        {/* <PiecesList/> */}\r\n        {/* <Footer/> */}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n",{"ruleId":"30","replacedBy":"31"},{"ruleId":"32","replacedBy":"33"},{"ruleId":"34","severity":1,"message":"35","line":1,"column":17,"nodeType":"36","messageId":"37","endLine":1,"endColumn":26},{"ruleId":"34","severity":1,"message":"38","line":1,"column":28,"nodeType":"36","messageId":"37","endLine":1,"endColumn":38},{"ruleId":"34","severity":1,"message":"39","line":1,"column":40,"nodeType":"36","messageId":"37","endLine":1,"endColumn":48},"no-native-reassign",["40"],"no-negated-in-lhs",["41"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useReducer' is defined but never used.","'useState' is defined but never used.","no-global-assign","no-unsafe-negation"]